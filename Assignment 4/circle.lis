     1                                  ;*****************************************************************************************************************************
     2                                  ;Program name: "Circumference Calculator".  This program takes a float input and it computes the circumference of a        *
     3                                  ;circle, it then sends this value as output.  Copyright (C) 2020 Joshua Elmer                                               *
     4                                  ;This program is free software: you can redistribute it and/or modify it under the terms of the GNU General Public License  *
     5                                  ;version 3 as published by the Free Software Foundation.                                                                    *
     6                                  ;This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied         *
     7                                  ;Warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for more details.     *
     8                                  ;A copy of the GNU General Public License v3 is available here:  <https://www.gnu.org/licenses/>.                           *
     9                                  ;*****************************************************************************************************************************
    10                                  
    11                                  ;=======1=========2=========3=========4=========5=========6=========7=========8=========9=========0=========1=========2=========3**
    12                                  ;
    13                                  ;Author information
    14                                  ;  Author name: Joshua Elmer
    15                                  ;  Author email: joshuaelmer@csu.fullerton.edu
    16                                  ;
    17                                  ;Program information
    18                                  ;  Program name: Circumference Calculator
    19                                  ;  Programming languages: One modules in C and one module in X86
    20                                  ;  Date program began:     2020-Nov-13
    21                                  ;  Date program completed: 2020-Nov-14
    22                                  ;  Files in this program: circumference.c, circle.asm, run.sh
    23                                  ;  Status: Complete.  No errors found after extensive testing.
    24                                  ;
    25                                  ;
    26                                  ;Purpose
    27                                  ;  Compute the Circumference Calculator using a float value for input.
    28                                  ;
    29                                  ;This file
    30                                  ;   File name: circle.asm
    31                                  ;   Language: X86-64 with Intel syntax
    32                                  ;   Assemble: nasm -f elf64 -l circle.lis -o circle.o circle.asm
    33                                  ;   Link: gcc -m64 -no-pie -o math.out circumference.o circle.o
    34                                  
    35                                  
    36                                  
    37                                  
    38                                  
    39                                  ;Declare the names of programs called from this X86 source file, but whose own source code is not in this file.
    40                                  extern printf
    41                                  extern scanf
    42                                  
    43                                  ;Declare constants if needed
    44                                  null equ 0
    45                                  newline equ 10
    46                                  
    47                                  global circle                                 ;Make this program callable by other programs.
    48                                  
    49                                  segment .data                                     ;Initialized data are placed in this segment
    50                                  
    51 00000000 546869732043697263-     welcome db "This Circumference calculator is brought to you by Joshua Elmer.", newline, null
    51 00000009 756D666572656E6365-
    51 00000012 2063616C63756C6174-
    51 0000001B 6F722069732062726F-
    51 00000024 7567687420746F2079-
    51 0000002D 6F75206279204A6F73-
    51 00000036 68756120456C6D6572-
    51 0000003F 2E0A00             
    52 00000042 506C6561736520656E-     promptforinteger1 db "Please enter the radius of a circle as a floating point number: ", null
    52 0000004B 746572207468652072-
    52 00000054 6164697573206F6620-
    52 0000005D 6120636972636C6520-
    52 00000066 6173206120666C6F61-
    52 0000006F 74696E6720706F696E-
    52 00000078 74206E756D6265723A-
    52 00000081 2000               
    53 00000083 546865206E756D6265-     outputformat1 db "The number %3.15lf was received", 10, 0
    53 0000008C 722025332E31356C66-
    53 00000095 207761732072656365-
    53 0000009E 697665640A00       
    54 000000A4 257300                  stringoutputformat db "%s", 0
    55 000000A7 256C6600                floatformat db "%lf", null
    56 000000AB 546865206369726375-     outputformat2 db "The circumference of a circle with this radius is %3.15lf meters", 10, 0
    56 000000B4 6D666572656E636520-
    56 000000BD 6F6620612063697263-
    56 000000C6 6C6520776974682074-
    56 000000CF 686973207261646975-
    56 000000D8 732069732025332E31-
    56 000000E1 356C66206D65746572-
    56 000000EA 730A00             
    57 000000ED 546865206369726375-     farewell db "The circumference will now be returned to the main program. Please enjoy your circles.", 10, 0
    57 000000F6 6D666572656E636520-
    57 000000FF 77696C6C206E6F7720-
    57 00000108 62652072657475726E-
    57 00000111 656420746F20746865-
    57 0000011A 206D61696E2070726F-
    57 00000123 6772616D2E20506C65-
    57 0000012C 61736520656E6A6F79-
    57 00000135 20796F757220636972-
    57 0000013E 636C65732E0A00     
    58                                  
    59                                  segment .bss                                      ;Uninitialized data are declared in this segment
    60                                  
    61                                  ;Empty segment: there are no un-initialized arrays.
    62                                  
    63                                  segment .text                                     ;Instructions are placed in this segment
    64                                  circle:                                       ;Entry point for execution of this program.
    65                                  
    66                                  ;Back up the general purpose registers for the sole purpose of protecting the data of the caller.
    67 00000000 55                      push rbp                                                    ;Backup rbp
    68 00000001 4889E5                  mov  rbp,rsp                                                ;The base pointer now points to top of stack
    69 00000004 57                      push rdi                                                    ;Backup rdi
    70 00000005 56                      push rsi                                                    ;Backup rsi
    71 00000006 52                      push rdx                                                    ;Backup rdx
    72 00000007 51                      push rcx                                                    ;Backup rcx
    73 00000008 4150                    push r8                                                     ;Backup r8
    74 0000000A 4151                    push r9                                                     ;Backup r9
    75 0000000C 4152                    push r10                                                    ;Backup r10
    76 0000000E 4153                    push r11                                                    ;Backup r11
    77 00000010 4154                    push r12                                                    ;Backup r12
    78 00000012 4155                    push r13                                                    ;Backup r13
    79 00000014 4156                    push r14                                                    ;Backup r14
    80 00000016 4157                    push r15                                                    ;Backup r15
    81 00000018 53                      push rbx                                                    ;Backup rbx
    82 00000019 9C                      pushf                                                       ;Backup rflags
    83                                  
    84                                  ;There are 15 pushes above.  Make one more push of any value so that the number of pushes is an even number
    85 0000001A 6AFF                    push qword -1                                               ;Now the number of pushes is even
    86                                  ;Registers rax, rip, and rsp are usually not backed up.
    87                                  
    88                                  ;Output the welcome message
    89 0000001C 48BF-                   mov qword rdi, stringoutputformat
    89 0000001E [A400000000000000] 
    90 00000026 48BE-                   mov qword rsi, welcome
    90 00000028 [0000000000000000] 
    91 00000030 B800000000              mov qword rax, 0
    92 00000035 E8(00000000)            call printf
    93                                  
    94                                  ;Prompt for the floating
    95 0000003A 48BF-                   mov qword rdi, stringoutputformat
    95 0000003C [A400000000000000] 
    96 00000044 48BE-                   mov qword rsi, promptforinteger1
    96 00000046 [4200000000000000] 
    97 0000004E B800000000              mov qword rax, 0
    98 00000053 E8(00000000)            call printf
    99                                  
   100                                  ;Input the float
   101 00000058 6A00                    push qword 0
   102 0000005A 48BF-                   mov rdi, floatformat
   102 0000005C [A700000000000000] 
   103 00000064 4889E6                  mov rsi, rsp                                ;Now rsi points to that dummy value on the stack
   104 00000067 B801000000              mov rax, 1                                  ;pass 1 into rax so that it knows to accept 1 input
   105 0000006C E8(00000000)            call scanf                                  ;Call the external function
   106 00000071 F2440F103C24            movsd xmm15, [rsp]                          ;store the value into the xmm15 register
   107                                  
   108                                  
   109                                  ;Output the value previously entered
   110 00000077 B801000000              mov rax, 1
   111 0000007C 48BF-                   mov rdi, outputformat1
   111 0000007E [8300000000000000] 
   112 00000086 F2410F10C7              movsd xmm0, xmm15
   113 0000008B E8(00000000)            call printf
   114                                  
   115                                  
   116                                  ;store the constant values needed for the circumference equation 2*pi*r
   117 00000090 49BD00000000000000-     mov r13, 0x4000000000000000               ;storing the hex representation for 2 into r13
   117 00000099 40                 
   118 0000009A 49BE182D4454FB2109-     mov r14, 0x400921FB54442D18               ;storing the hex representation for pi into r14
   118 000000A3 40                 
   119                                  
   120                                  
   121                                  ;mov the stored constants into the xmm Registers
   122 000000A4 664D0F6EED              movq xmm13, r13                           ;moving the hex representation for 2 into xmm13
   123 000000A9 664D0F6EF6              movq xmm14, r14                           ;moving the hex representation for pi into xmm14
   124                                  
   125                                  
   126                                  ;Circumference:
   127 000000AE F2450F59FD              mulsd xmm15, xmm13                        ;Use the double multiplication instruction 'mulsd' to multiply by 2
   128 000000B3 F2450F59FE              mulsd xmm15, xmm14                        ;Once again us 'mulsd' to multiply by the pi value
   129                                  
   130                                  
   131                                  ;Output the Circumference of the circle
   132 000000B8 B801000000              mov rax, 1
   133 000000BD 48BF-                   mov rdi, outputformat2
   133 000000BF [AB00000000000000] 
   134 000000C7 F2410F10C7              movsd xmm0, xmm15
   135 000000CC E8(00000000)            call printf
   136                                  
   137                                  
   138                                  ;Output the farewell message
   139 000000D1 48BF-                   mov qword rdi, stringoutputformat
   139 000000D3 [A400000000000000] 
   140 000000DB 48BE-                   mov qword rsi, farewell
   140 000000DD [ED00000000000000] 
   141 000000E5 B800000000              mov qword rax, 0
   142 000000EA E8(00000000)            call printf
   143                                  
   144                                  ;Restore the original values to the general registers before returning to the caller.
   145 000000EF F2410F10C7              movsd xmm0, xmm15                           ;mov the circumference into xmm0 to be returned to main
   146 000000F4 58                      pop rax
   147 000000F5 58                      pop rax
   148 000000F6 9D                      popf                                                        ;Restore rflags
   149 000000F7 5B                      pop rbx                                                     ;Restore rbx
   150 000000F8 415F                    pop r15                                                     ;Restore r15
   151 000000FA 415E                    pop r14                                                     ;Restore r14
   152 000000FC 415D                    pop r13                                                     ;Restore r13
   153 000000FE 415C                    pop r12                                                     ;Restore r12
   154 00000100 415B                    pop r11                                                     ;Restore r11
   155 00000102 415A                    pop r10                                                     ;Restore r10
   156 00000104 4159                    pop r9                                                      ;Restore r9
   157 00000106 4158                    pop r8                                                      ;Restore r8
   158 00000108 59                      pop rcx                                                     ;Restore rcx
   159 00000109 5A                      pop rdx                                                     ;Restore rdx
   160 0000010A 5E                      pop rsi                                                     ;Restore rsi
   161 0000010B 5F                      pop rdi                                                     ;Restore rdi
   162 0000010C 5D                      pop rbp                                                     ;Restore rbp
   163                                  
   164 0000010D C3                      ret                                               ;Pop the integer stack and jump to the address represented by the popped value.
